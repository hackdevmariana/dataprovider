<?php

namespace Database\Seeders;

use App\Models\ContentHashtag;
use App\Models\Hashtag;
use App\Models\Person;
use App\Models\Event;
use App\Models\User;
use Illuminate\Database\Seeder;
use Carbon\Carbon;

class ContentHashtagSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Obtener datos disponibles
        $hashtags = Hashtag::all();
        $users = User::all();
        $people = Person::all();
        $events = Event::all();
        
        if ($hashtags->isEmpty()) {
            $this->command->warn('No hay hashtags en la base de datos. No se pueden crear relaciones de contenido.');
            return;
        }
        
        if ($users->isEmpty()) {
            $this->command->warn('No hay usuarios en la base de datos. No se pueden crear relaciones de contenido.');
            return;
        }

        // Tipos de contenido disponibles para hashtags
        $contentTypes = [
            'Person' => $people,
            'Event' => $events,
        ];

        // Hashtags temáticos por categoría
        $thematicHashtags = [
            'Person' => [
                'artista' => ['#arte', '#pintura', '#escultura', '#dibujo', '#creatividad'],
                'musico' => ['#musica', '#concierto', '#instrumento', '#composicion', '#melodia'],
                'actor' => ['#teatro', '#cine', '#interpretacion', '#drama', '#comedia'],
                'escritor' => ['#literatura', '#poesia', '#novela', '#escritura', '#palabras'],
                'deportista' => ['#deporte', '#atletismo', '#competencia', '#entrenamiento', '#victoria'],
                'cientifico' => ['#ciencia', '#investigacion', '#descubrimiento', '#innovacion', '#conocimiento'],
                'politico' => ['#politica', '#gobierno', '#democracia', '#liderazgo', '#serviciopublico'],
                'empresario' => ['#negocios', '#emprendimiento', '#innovacion', '#liderazgo', '#exito'],
            ],
            'Event' => [
                'cultural' => ['#cultura', '#arte', '#exposicion', '#festival', '#creatividad'],
                'musical' => ['#musica', '#concierto', '#festival', '#melodia', '#ritmo'],
                'deportivo' => ['#deporte', '#competencia', '#atletismo', '#entrenamiento', '#victoria'],
                'academico' => ['#educacion', '#conocimiento', '#investigacion', '#aprendizaje', '#ciencia'],
                'social' => ['#comunidad', '#solidaridad', '#ayuda', '#voluntariado', '#bienestar'],
                'tecnologico' => ['#tecnologia', '#innovacion', '#digital', '#futuro', '#progreso'],
                'medioambiental' => ['#sostenibilidad', '#medioambiente', '#naturaleza', '#ecologia', '#verde'],
                'gastronomico' => ['#gastronomia', '#cocina', '#sabor', '#tradicion', '#cultura'],
            ],
        ];

        $createdRelations = [];
        $relationCount = 0;

        // Crear relaciones para personas
        foreach ($people as $person) {
            // Determinar profesión principal de la persona
            $profession = $this->getPersonProfession($person);
            $category = $this->mapProfessionToCategory($profession);
            
            if (isset($thematicHashtags['Person'][$category])) {
                $hashtagNames = $thematicHashtags['Person'][$category];
                
                // Seleccionar 2-4 hashtags relevantes
                $selectedHashtags = array_rand(array_flip($hashtagNames), rand(2, 4));
                if (!is_array($selectedHashtags)) {
                    $selectedHashtags = [$selectedHashtags];
                }
                
                foreach ($selectedHashtags as $hashtagName) {
                    $hashtag = $hashtags->where('name', $hashtagName)->first();
                    if (!$hashtag) {
                        continue;
                    }
                    
                    $user = $users->random();
                    $relevanceScore = rand(70, 100);
                    $isAutoGenerated = rand(1, 10) <= 7; // 70% auto-generados
                    $confidenceScore = $isAutoGenerated ? rand(75, 95) : null;
                    
                    $contentHashtag = ContentHashtag::create([
                        'hashtag_id' => $hashtag->id,
                        'hashtaggable_type' => 'App\\Models\\Person',
                        'hashtaggable_id' => $person->id,
                        'added_by' => $user->id,
                        'clicks_count' => rand(0, 150),
                        'relevance_score' => $relevanceScore,
                        'is_auto_generated' => $isAutoGenerated,
                        'confidence_score' => $confidenceScore,
                    ]);
                    
                    $createdRelations[] = [
                        'id' => $contentHashtag->id,
                        'content_type' => 'Persona',
                        'content_name' => $person->name ?? 'Persona #' . $person->id,
                        'hashtag' => $hashtag->name,
                        'relevance' => $relevanceScore,
                        'clicks' => $contentHashtag->clicks_count,
                        'auto_generated' => $isAutoGenerated ? '✅ Sí' : '❌ No',
                        'confidence' => $confidenceScore ? $confidenceScore . '%' : 'N/A',
                    ];
                    
                    $relationCount++;
                }
            }
        }

        // Crear relaciones para eventos
        foreach ($events as $event) {
            // Determinar tipo de evento
            $eventType = $this->getEventType($event);
            $category = $this->mapEventTypeToCategory($eventType);
            
            if (isset($thematicHashtags['Event'][$category])) {
                $hashtagNames = $thematicHashtags['Event'][$category];
                
                // Seleccionar 3-5 hashtags relevantes
                $selectedHashtags = array_rand(array_flip($hashtagNames), rand(3, 5));
                if (!is_array($selectedHashtags)) {
                    $selectedHashtags = [$selectedHashtags];
                }
                
                foreach ($selectedHashtags as $hashtagName) {
                    $hashtag = $hashtags->where('name', $hashtagName)->first();
                    if (!$hashtag) {
                        continue;
                    }
                    
                    $user = $users->random();
                    $relevanceScore = rand(80, 100); // Eventos suelen tener hashtags más relevantes
                    $isAutoGenerated = rand(1, 10) <= 6; // 60% auto-generados
                    $confidenceScore = $isAutoGenerated ? rand(80, 98) : null;
                    
                    $contentHashtag = ContentHashtag::create([
                        'hashtag_id' => $hashtag->id,
                        'hashtaggable_type' => 'App\\Models\\Event',
                        'hashtaggable_id' => $event->id,
                        'added_by' => $user->id,
                        'clicks_count' => rand(5, 300), // Eventos suelen tener más engagement
                        'relevance_score' => $relevanceScore,
                        'is_auto_generated' => $isAutoGenerated,
                        'confidence_score' => $confidenceScore,
                    ]);
                    
                    $createdRelations[] = [
                        'id' => $contentHashtag->id,
                        'content_type' => 'Evento',
                        'content_name' => $event->name ?? 'Evento #' . $event->id,
                        'hashtag' => $hashtag->name,
                        'relevance' => $relevanceScore,
                        'clicks' => $contentHashtag->clicks_count,
                        'auto_generated' => $isAutoGenerated ? '✅ Sí' : '❌ No',
                        'confidence' => $confidenceScore ? $confidenceScore . '%' : 'N/A',
                    ];
                    
                    $relationCount++;
                }
            }
        }

        // Crear algunas relaciones adicionales aleatorias para mayor variedad
        $additionalRelations = rand(20, 40);
        
        for ($i = 0; $i < $additionalRelations; $i++) {
            $contentType = array_rand($contentTypes);
            $content = $contentTypes[$contentType]->random();
            $hashtag = $hashtags->random();
            $user = $users->random();
            
            // Verificar que no exista ya esta relación
            $existingRelation = ContentHashtag::where('hashtag_id', $hashtag->id)
                ->where('hashtaggable_type', 'App\\Models\\' . $contentType)
                ->where('hashtaggable_id', $content->id)
                ->first();
            
            if ($existingRelation) {
                continue;
            }
            
            $relevanceScore = rand(50, 95);
            $isAutoGenerated = rand(1, 10) <= 8; // 80% auto-generados
            $confidenceScore = $isAutoGenerated ? rand(60, 90) : null;
            
            $contentHashtag = ContentHashtag::create([
                'hashtag_id' => $hashtag->id,
                'hashtaggable_type' => 'App\\Models\\' . $contentType,
                'hashtaggable_id' => $content->id,
                'added_by' => $user->id,
                'clicks_count' => rand(0, 100),
                'relevance_score' => $relevanceScore,
                'is_auto_generated' => $isAutoGenerated,
                'confidence_score' => $confidenceScore,
            ]);
            
            $createdRelations[] = [
                'id' => $contentHashtag->id,
                'content_type' => $contentType === 'Person' ? 'Persona' : 'Evento',
                'content_name' => $content->name ?? ($contentType . ' #' . $content->id),
                'hashtag' => $hashtag->name,
                'relevance' => $relevanceScore,
                'clicks' => $contentHashtag->clicks_count,
                'auto_generated' => $isAutoGenerated ? '✅ Sí' : '❌ No',
                'confidence' => $confidenceScore ? $confidenceScore . '%' : 'N/A',
            ];
            
            $relationCount++;
        }

        $this->command->info("Se han creado {$relationCount} relaciones de contenido-hashtag.");
        
        // Mostrar tabla con las relaciones creadas
        $displayData = array_slice($createdRelations, 0, 20); // Mostrar solo las primeras 20
        $this->command->table(
            ['ID', 'Tipo Contenido', 'Nombre Contenido', 'Hashtag', 'Relevancia', 'Clicks', 'Auto-Generado', 'Confianza'],
            $displayData
        );
        
        if (count($createdRelations) > 20) {
            $this->command->info("... y " . (count($createdRelations) - 20) . " relaciones más.");
        }

        // Estadísticas
        $totalRelations = ContentHashtag::count();
        $autoGeneratedCount = ContentHashtag::where('is_auto_generated', true)->count();
        $manualCount = ContentHashtag::where('is_auto_generated', false)->count();
        
        // Estadísticas por tipo de contenido
        $contentTypeStats = ContentHashtag::selectRaw('hashtaggable_type, COUNT(*) as count')
            ->groupBy('hashtaggable_type')
            ->pluck('count', 'hashtaggable_type')
            ->toArray();
        
        // Estadísticas por hashtag
        $hashtagStats = ContentHashtag::selectRaw('hashtags.name, COUNT(*) as count')
            ->join('hashtags', 'content_hashtags.hashtag_id', '=', 'hashtags.id')
            ->groupBy('hashtags.id', 'hashtags.name')
            ->pluck('count', 'name')
            ->toArray();
        
        // Total de clicks y relevancia promedio
        $totalClicks = ContentHashtag::sum('clicks_count');
        $averageRelevance = ContentHashtag::avg('relevance_score');
        $averageConfidence = ContentHashtag::whereNotNull('confidence_score')->avg('confidence_score');
        
        $this->command->newLine();
        $this->command->info("📊 Estadísticas:");
        $this->command->info("   • Total de relaciones: {$totalRelations}");
        $this->command->info("   • Auto-generadas: {$autoGeneratedCount}");
        $this->command->info("   • Manuales: {$manualCount}");
        $this->command->info("   • Total de clicks: {$totalClicks}");
        $this->command->info("   • Relevancia promedio: " . round($averageRelevance, 2));
        $this->command->info("   • Confianza promedio: " . round($averageConfidence, 2));
        
        $this->command->newLine();
        $this->command->info("📱 Por tipo de contenido:");
        foreach ($contentTypeStats as $type => $count) {
            $typeLabel = str_replace('App\\Models\\', '', $type);
            $this->command->info("   • {$typeLabel}: {$count}");
        }
        
        $this->command->newLine();
        $this->command->info("🏷️ Hashtags más utilizados:");
        arsort($hashtagStats);
        $topHashtags = array_slice($hashtagStats, 0, 10, true);
        foreach ($topHashtags as $hashtagName => $count) {
            $this->command->info("   • {$hashtagName}: {$count} usos");
        }
        
        $this->command->newLine();
        $this->command->info("✅ Seeder de ContentHashtag completado exitosamente.");
    }

    /**
     * Obtener la profesión principal de una persona
     */
    private function getPersonProfession($person): string
    {
        // Simular profesión basada en el nombre o ID
        $professions = ['artista', 'musico', 'actor', 'escritor', 'deportista', 'cientifico', 'politico', 'empresario'];
        return $professions[$person->id % count($professions)];
    }

    /**
     * Mapear profesión a categoría de hashtags
     */
    private function mapProfessionToCategory(string $profession): string
    {
        $mapping = [
            'artista' => 'artista',
            'musico' => 'musico',
            'actor' => 'actor',
            'escritor' => 'escritor',
            'deportista' => 'deportista',
            'cientifico' => 'cientifico',
            'politico' => 'politico',
            'empresario' => 'empresario',
        ];
        
        return $mapping[$profession] ?? 'artista';
    }

    /**
     * Obtener el tipo de evento
     */
    private function getEventType($event): string
    {
        // Simular tipo de evento basado en el ID
        $eventTypes = ['cultural', 'musical', 'deportivo', 'academico', 'social', 'tecnologico', 'medioambiental', 'gastronomico'];
        return $eventTypes[$event->id % count($eventTypes)];
    }

    /**
     * Mapear tipo de evento a categoría de hashtags
     */
    private function mapEventTypeToCategory(string $eventType): string
    {
        $mapping = [
            'cultural' => 'cultural',
            'musical' => 'musical',
            'deportivo' => 'deportivo',
            'academico' => 'academico',
            'social' => 'social',
            'tecnologico' => 'tecnologico',
            'medioambiental' => 'medioambiental',
            'gastronomico' => 'gastronomico',
        ];
        
        return $mapping[$eventType] ?? 'cultural';
    }
}
